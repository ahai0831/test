source_set("cloud_base") {
  sources = [
    "src/AES/AES.cpp",
    "src/DateHelper/DateHelper.cpp",
    "src/HashAlgorithm/HMAC_SHA1.cpp",
    "src/HashAlgorithm/SHA1.cpp",
    "src/HashAlgorithm/SHA1Digest.cpp",
    "src/HashAlgorithm/md5.cpp",
    "src/UrlEncode/UrlEncode.cpp",
    "src/base64/base64.cpp",
    "src/rand/rand.cpp",
  ]

  public = [
    "src/AES/AES.h",
    "src/DateHelper/DateHelper.h",
    "src/HashAlgorithm/HMAC_SHA1.h",
    "src/HashAlgorithm/SHA1.h",
    "src/HashAlgorithm/SHA1Digest.h",
    "src/HashAlgorithm/md5.h",
    "src/UrlEncode/UrlEncode.h",
    "src/base64/base64.h",
    "src/rand/rand.h",
  ]

  if (is_win) {
    sources += [ "src/MiniDump/MiniDump.cpp",
    "src/process_version/process_version.cpp",
    "src/filesystem_helper/filesystem_helper.cpp",
    "src/filesystem_helper/appdata_path.cpp",
    "src/UniqueMachineCode/UniqueMachineCode.cpp",
     ]
    public += [ "src/MiniDump/MiniDump.h",
    "src/process_version/process_version.h",
    "src/filesystem_helper/filesystem_helper.h",
    "src/UniqueMachineCode/UniqueMachineCode.h",
     ]
  }

  # prevent some syntax errors
  if (is_win) {
    configs -= [ "//build/config/win:lean_and_mean" ]
  }
  configs += [ ":cloud_base_internal" ]
  public_configs = [ ":cloud_base_using" ]
}

config("cloud_base_internal") {
  if (is_mac) {
    configs = [ "//build/config:c++14" ]
  }
}

config("cloud_base_using") {
  include_dirs = [ "src" ]
  if (is_win) {
    libs = [
      "Dbghelp.lib",
      "Netapi32.lib",
      "Version.lib",
    ]
  }
}
