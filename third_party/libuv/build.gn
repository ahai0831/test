import("//third_party/third_template.gni")

library_version = "libuv-1.20.3"

third_fetch_code("fetch_code") {
  csv_file = library_version + ".csv"

  # Take care of the suffix name
  package_file = library_version + ".tar.gz"
}

third_config("libuv_internal") {
  include_dirs = [
    ".",
    "src",
    "include",
  ]
  defines = [
    "_CRT_SECURE_NO_DEPRECATE",
    "_CRT_NONSTDC_NO_DEPRECATE",
    "_WIN32_WINNT=0x0600",
    "_GNU_SOURCE",
  ]
}

third_config("libuv_using") {
  include_dirs = [ "include" ]
  if (is_win) {
    # Windows should be different.
    libs = [
      "Iphlpapi.lib",
      "Psapi.lib",
      "Userenv.lib",
      "ws2_32.lib",
    ]
  }
}

third_static_library("libuv") {
  deps = [
    ":fetch_code",
  ]

  sources = [
    "src/fs-poll.c",
    "src/inet.c",
    "src/threadpool.c",
    "src/uv-common.c",
    "src/version.c",
    "src/win/async.c",
    "src/win/core.c",
    "src/win/detect-wakeup.c",
    "src/win/dl.c",
    "src/win/error.c",
    "src/win/fs-event.c",
    "src/win/fs.c",
    "src/win/getaddrinfo.c",
    "src/win/getnameinfo.c",
    "src/win/handle.c",
    "src/win/loop-watcher.c",
    "src/win/pipe.c",
    "src/win/poll.c",
    "src/win/process-stdio.c",
    "src/win/process.c",
    "src/win/signal.c",
    "src/win/snprintf.c",
    "src/win/stream.c",
    "src/win/tcp.c",
    "src/win/thread.c",
    "src/win/timer.c",
    "src/win/tty.c",
    "src/win/udp.c",
    "src/win/util.c",
    "src/win/winapi.c",
    "src/win/winsock.c",
  ]
  public = [
    "include/tree.h",
    "include/uv-errno.h",
    "include/uv-threadpool.h",
    "include/uv-version.h",
    "include/uv-win.h",
    "include/uv.h",
    "src/heap-inl.h",
    "src/queue.h",
    "src/uv-common.h",
    "src/win/atomicops-inl.h",
    "src/win/handle-inl.h",
    "src/win/internal.h",
    "src/win/req-inl.h",
    "src/win/stream-inl.h",
    "src/win/winapi.h",
    "src/win/winsock.h",
  ]
  configs = [ ":libuv_internal" ]
  public_configs = [ ":libuv_using" ]
}
